#!/usr/bin/env python2

import argparse
import subprocess
import datetime
import time
import os
import json
import re
import sys

# TODO: investigate how to update dockerhub description automatically, once it's pushed.
# TODO: investigate better mailing reports.
# TODO: docker ps --filter "status=exited" | grep 'hours ago' | awk '{print $1}' | xargs --no-run-if-empty docker rm


# from urllib import urlopen
from urllib2 import Request, urlopen
from itertools import repeat


EMSDK_GIT_REPO = "https://github.com/emscripten-core/emscripten/"
DOCKER_REGISTRY = "registry.hub.docker.com"

GH_DOCKER_REGISTRY = "docker.pkg.github.com"
GH_DOCKER_REPO = "trzecieu/emscripten-docker"

DOCKER_REPO = "trzeci/emscripten"
DOCKER_REPO_SLIM = "trzeci/emscripten-slim"
DOCKER_REPO_ALPINE = "trzeci/emscripten-alpine"
DOCKER_REPO_UBUNTU = "trzeci/emscripten-ubuntu"
DOCKER_REPO_UPSTREAM = "trzeci/emscripten-upstream"

DOCKER_REPO_VARIANTS = [
    DOCKER_REPO_SLIM,
    # DOCKER_REPO_ALPINE,
    DOCKER_REPO,
    DOCKER_REPO_UBUNTU,
    DOCKER_REPO_UPSTREAM,
]

sort_variants_lut = {
    "emscripten-slim" : 0,
    "emscripten-alpine" : 1,
    "emscripten" : 2,
    "emscripten-ubuntu" : 3,
    "emscripten-upstream" : 4,
}

SDK_MIN = "1.37.16"
QUEUE_FILE = "queue.txt"
LOG_COMPILATION = "build.log"

SDK_IGNORED = [
    "1.38.7", # malformed due an incompatibility with EMSDK release
    "1.38.17", # ignored due an SDK error
    "1.38.33", # broken dependency between emscipten<>emscripten-releases
]

TEST_CASES = {
    DOCKER_REPO_SLIM : [
        "emcc test.cpp -o test.js -s WASM=0 && node test.js",
        "emcc test.cpp -o test.js -s WASM=1 && node test.js",
        "node --version",
        "python --version",
        "embuilder.py build zlib", # tests if https is available
        "/emsdk_portable/emsdk list",
    ],
    DOCKER_REPO_ALPINE : [
        "emcc test.cpp -o test.js -s WASM=0 && node test.js",
        "emcc test.cpp -o test.js -s WASM=1 && node test.js",
        "node --version",
        "python --version",
        "embuilder.py build zlib", # tests if https is available
        "/emsdk_portable/emsdk list",
    ],
    DOCKER_REPO : [
        "emcc test.cpp -o test.js -s WASM=0 && node test.js",
        "emcc test.cpp -o test.js -s WASM=0 --closure 1 && node test.js",
        "emcc test.cpp -o test.js -s WASM=1 && node test.js",
        "embuilder.py build zlib", # tests if https is available
        "node --version",
        "python --version",
        "wget --version",
        "curl --version",
        "zip --version",
        "unzip -version",
        "make --version",
        "cmake --version",
        "git --version",
        "which ssh",
        "perl --version",
        "java -version",
        "/emsdk_portable/emsdk list",
    ],
    DOCKER_REPO_UPSTREAM : [
        "emcc test.cpp -o test.js -s WASM=0 && node test.js",
        "emcc test.cpp -o test.js -s WASM=0 --closure 1 && node test.js",
        "emcc test.cpp -o test.js -s WASM=1 && node test.js",
        "embuilder.py build zlib", # tests if https is available
        "node --version",
        "python --version",
        "wget --version",
        "curl --version",
        "zip --version",
        "unzip -version",
        "make --version",
        "cmake --version",
        "git --version",
        "which ssh",
        "perl --version",
        "java -version",
        "/emsdk_portable/emsdk list",
    ],
    DOCKER_REPO_UBUNTU : [
        "emcc test.cpp -o test.js -s WASM=0 && node test.js",
        "emcc test.cpp -o test.js -s WASM=0 --closure 1 && node test.js",
        "emcc test.cpp -o test.js -s WASM=1 && node test.js",
        "embuilder.py build zlib", # tests if https is available
        "node --version",
        "python --version",
        "wget --version",
        "curl --version",
        "zip --version",
        "unzip -version",
        "make --version",
        "cmake --version",
        "git --version",
        "which ssh",
        "perl --version",
        "/emsdk_portable/emsdk list",
    ],
}


# Utils ------------------------------------------------------------------------

class Dashboard:
    task = ""
    task_progress = ""
    step = ""
    status = ""
    log_trace = ""
    status_progress = ""

    last_status = ""

    def update(self):
        status = "[{task_progress}]({task})[{step}][{status_progress}%]({status}) {trace}\r".format(
            task_progress = self.task_progress,
            task = self.task,
            step = self.step,
            status = self.status,
            status_progress = self.status_progress,
            trace = self.log_trace,
        )
        self.tail(status)

    def tail(self, status):
        if len(self.last_status) > len(status):
            sys.stdout.write(" " * len(self.last_status) + "\r")
            sys.stdout.flush()

        self.last_status = status
        sys.stdout.write(status)
        sys.stdout.flush()


    def set_task(self, task, index, length):
        self.step = ""
        self.status = ""
        self.status_progress = ""
        self.log_trace = ""

        self.task = task
        self.task_progress = "{i}/{o}".format(i=index, o=length)
        self.update()

    def set_status(self, status):
        self.status = status
        self.log_trace = ""
        self.update()

    def set_step(self, step):
        self.step = step

    def set_progress(self, progress):
        self.status_progress = progress
        self.update()

    def trace(self,trace):
        self.log_trace = trace
        self.update()

    def log(self, text):
        copy = self.last_status
        self.tail("")
        print(text) # and moves up
        self.tail(copy)


def log(text, console=False):
    if console:
        dashboard.log(text)

    with open(LOG_COMPILATION, "a") as f:
        f.write("\n[{time}] {text}".format(time=datetime.datetime.now(), text=text))

def sort_variants(x, y):
    return sort_variants_lut[x.project] - sort_variants_lut[y.project]

def version_compare(x, y):
    a = 1 if is_version_at_least(x, y) else 0
    b = 1 if is_version_at_least(y, x) else 0
    return a - b

def is_version_at_least(ver, target):
    ver = map(lambda x: int(x) if x.isdigit() else 0, ver.split('.'))
    target = map(lambda x: int(x) if x.isdigit() else 0, target.split('.'))
    while len(ver) < len(target):
        ver += [0]
    for i in range(len(ver)):
        if ver[i] < target[i]:
            return False
        elif ver[i] > target[i]:
            return True
    return True

#  Emscripten Helpers ----------------------------------------------------------

class EMBuild:
    def __init__(self, emscripten_sdk, update):
        self.emscripten_sdk = emscripten_sdk
        self.update = update

    @property
    def docker_name(self, docker_project):
        return docker_project + ":" + self.emscripten_sdk

    @property
    def docker_tag(self):
        return self.emscripten_sdk


class EMHelper:
    @staticmethod
    def get_sdk_name_tag(tag):
        return "sdk-tag-{tag}-64bit".format(tag=tag)

    @staticmethod
    def get_sdk_name_branch(branch):
        return "sdk-{branch}-64bit".format(branch=branch)

    @staticmethod
    def get_emscripten_tags(min_version):
        tags = subprocess.check_output(["git", 'ls-remote', '--tags', EMSDK_GIT_REPO]).decode("utf-8").strip().split("\n")
        all_tags = []
        for t in tags:
            try:
                t = t[t.index('refs/tags/') + len('refs/tags/'):].strip()
                if is_version_at_least(t, min_version):
                    all_tags += [t]
            except:
                pass
        result = map(lambda x: str(x), all_tags)
        result = sorted(result, cmp=version_compare, reverse=True)
        result = list(filter(lambda x: x not in SDK_IGNORED, result))
        return result

    @staticmethod
    def expand_tags_to_variants(tags):
        result = set()
        for t in tags:
            for r in DOCKER_REPO_VARIANTS:
                result.add(r + ":" + t)
        return result

class EmscriptenTester:
    @staticmethod
    def test_image(id, remove_image=False):
        log("TESTING: " + id)
        test_successed = True

        docker_project = DockerHelper.decompose_image_id(id)[0]
        if docker_project not in TEST_CASES:
            log("Missing defined test cases for %s, fallback to base tests" % docker_project)
            tests = TEST_CASES[DOCKER_REPO_SLIM]
        else:
            tests = TEST_CASES[docker_project]

        # FIXME: Doesn't detect local storage
        # if subprocess.call(["docker pull {id}".format(id=id)], shell=True):
            # print("[ERROR] Image wasn't pulled and it's not stored locally: " + id)
            # return False

        for user in [["-u", "emscripten"], []]:
            log("[INFO] ## Setting user switch: '%s'" % user)
            for entrypoint in [["--entrypoint="], []]:
                log("[INFO] ## Setting entrypoint switch: '%s'" % entrypoint)
                for test in tests:
                    volume = os.path.join(os.path.dirname(os.path.realpath(__file__)), "src")
                    cmd = [
                        "docker", "run", "--rm",
                    ]
                    # test build with and without entrypoint (to make sure that raw image also works)
                    cmd += entrypoint
                    cmd += user
                    cmd += [
                        "-v", "{}:/src".format(volume),
                        "-w", "/src",
                        "-u", "emscripten",
                        id,
                        "bash", "-c",
                        test,
                    ]

                    p = subprocess.Popen(cmd,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                    )
                    out, err = p.communicate()

                    log("[INFO]: {}".format(subprocess.list2cmdline(cmd)))

                    if p.returncode:
                        if err: log(err)
                        if out: log(out)

                        log("[ERROR] Testing {id} failed".format(id=id))
                        test_successed = False

        if remove_image:
            subprocess.call(["docker rmi {id}".format(id=id)], shell=True)

        if test_successed:
            log("TEST: {} - SUCCESS".format(id), True)
        else:
            log("TEST: {} - FAIL".format(id), True)

        return test_successed


class DockerHelper:
    @staticmethod
    def pushed_tags(repo):
        api = "https://{registry}/v1/repositories/{repo}/tags".format(repo=repo, registry=DOCKER_REGISTRY)
        response = urlopen(api)
        data = json.loads(str(response.read()))
        return map(lambda x: str(x["name"]), data)

    @staticmethod
    def decompose_image_id(image_id):
        print(image_id)
        project, tag = image_id.split(":")
        version = re.match(r'.+(\d+\.\d+\.\d+).+', tag).groups()[0]
        return (project, tag, version)

    @staticmethod
    def push_image(image, clean=False):
        for i in repeat(None, 3):
            if subprocess.call(["docker", "push", image]):
                log("[WARNING] Pushing {image} failed. Repeat.".format(image=image))
            else:
                log("[INFO] Pushed tag: {image} ".format(image=image))
                if clean:
                    log("[INFO] Removed local tag: {image} ".format(image=image))
                    subprocess.call(["docker", "rmi", "-f", image])
                return
        log("[ERROR] Pushing {image} failed.".format(image=image))

    @staticmethod
    def tag(old, new):
        subprocess.call(["docker", "tag", old, new])
        return

class DockerRegistry:
    def __init__(self):
        pass

    def login(self):
        # usefull to access some Docker Hub functionality
        r = Request("https://hub.docker.com/v2/users/login/",
            json.dumps({
                "username" : os.environ["DOCKER_NAME"],
                "password" : os.environ["DOCKER_PASS"]
            }),
            {'Content-Type': 'application/json'}
        )
        try:
            self.access_token = json.loads(urlopen(r).read())["token"]
        except Exception as e:
            print("Wrong docker login data.")


    def get_auth_header(self, repository, headers=None):
        # TODO: Add a logic what caches token
        headers = headers if headers else {}
        r = Request("https://auth.docker.io/token?service=registry.docker.io&scope=repository:{repository}:pull".format(repository=repository))
        data = urlopen(r).read()
        headers["Authorization"] = "Bearer " + json.loads(data)["token"]
        return headers

    def get_manifest(self, repository, reference):
        r = Request(
            "https://index.docker.io/v2/{repository}/manifests/{reference}".format(repository=repository, reference=reference),
            headers=self.get_auth_header(repository, {
                "Accept" : "application/vnd.docker.distribution.manifest.v2+json"
            })
        )
        return json.loads(urlopen(r).read())

    def get_digest(self, repository, reference):
        manifest = self.get_manifest(repository, reference)
        return manifest["config"]["digest"]

    def add_authorization_header(self, headers):
        headers["Authorization"] = "JWT " + self.access_token
        return headers

    def authorized(self):
        return self.access_token is not None

class DockerNameDecompose:
    def __init__(self, full_name):
        m = re.match(r'(\S+)/(\S+)\:sdk-(.*)-64bit(?:_(\w+))?', full_name)
        self.full_name = full_name
        if m:
            self.valid = True
            self.namespace = m.groups()[0]
            self.project = m.groups()[1]
            self.name = m.groups()[2].split("-")[-1]
            self.base_system = m.groups()[3] if len(m.groups()) > 3 else ""
        else:
            self.valid = False

    def __str__(self):
        return self.full_name

class CompilationSet:
    def __init__(self, name, variants=None):
        self.name = name
        self.variants = variants[:] if variants else []


# --------------VV------------- NOT REFACTORED YET --------------VV-------------

def get_builds(tags, update=False, branches=None, releases=False):
    result = []
    if releases:
        for tag in tags:
            sdk = EMHelper.get_sdk_name_tag(tag)
            result.append(EMBuild(sdk, update))
    for branch in branches:
        sdk = EMHelper.get_sdk_name_branch(branch)
        result.append(EMBuild(sdk, True))
    return result


def compile_image(image_id, emsdk_cs, no_cache = False):
    t_start = datetime.datetime.now()
    print("---")
    print(image_id)
    docker_project, emscripten_sdk, emscripten_version = DockerHelper.decompose_image_id(image_id)
    log("[INFO] Start compiling [{i}]".format(i=image_id))
    with open("build_{}.log".format(image_id.replace("/","_")), "w") as f:
        cmd = []
        cmd += [
            "docker",
            "build",
        ]
        cmd += ["--no-cache"] if no_cache else []
        cmd += [
            "-t", image_id,
            # "--build-arg", "EMSCRIPTEN_SDK=" + emscripten_sdk,
            "--build-arg", "EMSCRIPTEN_VERSION=" + emscripten_version,
            "--build-arg", "EMSDK_CHANGESET=" + emsdk_cs,
            "docker/" + docker_project
        ]
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)

        for l in iter(p.stdout.readline, ''):
            f.write(l)
            f.flush()

            r = re.match(r'## (.+)', l)
            if r:
                dashboard.set_status(r.groups()[0])
                continue

            r = re.match(r'\[\s*(\d+)\%]', l)
            if r:
                dashboard.set_progress(int(r.groups()[0]))
                continue

            r = re.match(r'Step (\d+/\d+)', l)
            if r:
                dashboard.set_step(r.groups()[0])
                continue

            r = re.match(r'\] Built target (.+)', l)
            if r:
                dashboard.trace(r.groups()[0])
                continue

            r = re.match(r'Unpacking (.+) ', l)
            if r:
                dashboard.trace(r.groups()[0])
                continue
    p.communicate()
    log("[INFO] Compiled [{tag}] in: {time}".format(tag=image_id, time=str(datetime.datetime.now() - t_start)), True)
    return False if p.returncode else True

def defer_push(image_name):
    queue = open(QUEUE_FILE, 'r').read().splitlines(True) if os.path.isfile(QUEUE_FILE) else []
    queue.insert(0, image_name + "\n")
    with open(QUEUE_FILE, 'w+') as f:
        f.writelines(queue)
        log("[INFO] Deferred pushing name: {name} ".format(name=image_name))


def get_sdk_to_compile(em_builds, docker_tags):
    result = []
    for b in em_builds:
        if b.docker_tag not in docker_tags:
            b.update = True

        if b.update:
            result.append(b.docker_tag)
    return result


# ------------------------------------------------------------------------------

def get_variants_to_compile(args):
    # ["1.23.4", ...]
    emscripten_tags = EMHelper.get_emscripten_tags(SDK_MIN)

    # List of pushed tags to Docker, in format: ['sdk-master-32bit', 'sdk-tag-1.38.8-64bit', ...]
    docker_tags = DockerHelper.pushed_tags(DOCKER_REPO)

    # like master, incoming
    branches_to_compile = set()

    # like 1.33.1 - any valid tag that's pushed to emscripten
    versions_to_compile = set()

    # valid tag that's used in this project - regardles it's emscripten, emscripten-slim or other.
    tags_to_compile = set()

    # every possible variant that's needed to be compiled
    # It's a full Docker name: namespace/project:tag
    variants_to_compile = set()

    if args.incoming or args.branches:
        branches_to_compile.add("incoming")
    if args.master or args.branches:
        branches_to_compile.add("master")

    # compile every release that isn't pushed to docker registry
    if args.releases:
        for v in emscripten_tags:
            if EMHelper.get_sdk_name_tag(v) not in docker_tags:
                versions_to_compile.add(v)

    # if tag was given explicitly, then use it
    for sth in args.sdks:
        # sdk can be either: full docker image id, or a tag.
        if sth.find(":") >= 0:
            variants_to_compile.add(sth)
        elif re.match(r'^\d+\.\d+\.\d+$', sth): # it's a version number: 1.12.4
            versions_to_compile.add(sth)
        elif sth in ["master", "incoming"]: # it's a branch name
            branches_to_compile.add(sth)
        else:
            # assuming that 'sth' is a valid DockerHub tag
            tags_to_compile.add(sth)

    # populate tags_to_compile
    for b in branches_to_compile:
        tags_to_compile.add(EMHelper.get_sdk_name_branch(b))

    for v in versions_to_compile:
        tags_to_compile.add(EMHelper.get_sdk_name_tag(v))

    # populate variants to compile
    variants_to_compile = variants_to_compile.union(EMHelper.expand_tags_to_variants(tags_to_compile))
    return list(variants_to_compile)

def create_compilation_sets(variants):
    """takes a set of possible compilation variants and create a list of atomic sets"""
    """each atomic set contains one or more variants, in order to mark those compilation successful, every variant has to succeeded"""
    sets = dict()

    # simplified logic groups only by version/tag
    # sdk-master-32bit', 'sdk-tag-1.38.8-64bit
    for v in variants:
        variant = DockerNameDecompose(v)
        if variant.valid:
            if variant.name not in sets:
                sets[variant.name] = CompilationSet(variant.name)
            sets[variant.name].variants.append(variant)
        else:
            log("{} tag name looks incorect!".format(v), True)

    # sort sets
    result = sorted(sets.values(), key=lambda x: x.name, cmp=version_compare, reverse=False)
    # sort variants in sets
    for r in result:
        r.variants = sorted(r.variants, cmp=sort_variants)

    return result

def compile(args):
    """Build images, and push tags to the queue"""

    assert(not args.branches)   # not supported ATM
    assert(not args.incoming)   # not supported ATM
    assert(not args.master)     # not supported ATM

    variants = get_variants_to_compile(args)
    sets = create_compilation_sets(variants)

    total_images = 0
    for s in sets:
        dashboard.log("* {}".format(s.name))
        total_images += len(s.variants)
        for v in s.variants:
            dashboard.log("  * {}".format(v.full_name))

    success = True
    for s in sets:
        set_compiled = True
        for i, v in enumerate(s.variants):
            image_id = v.full_name
            dashboard.set_task(image_id, i + 1, len(s.variants))
            if compile_image(image_id, args.emsdk_cs, no_cache = args.no_cache) and EmscriptenTester.test_image(image_id) :
                log("{} - SUCCESS".format(image_id), True)
            else:
                log("{} - FAIL".format(image_id), True)
                set_compiled = False
                break

        if set_compiled:
            # reversed, because defer push always puts new element in front of queue.
            for v in s.variants[::-1]:
                defer_push(v.full_name)
        else:
            success = False
            if args.fast_fail:
                break

    if not success:
        log("At least one compilation set has failed to compile", True)
        exit(1)


def set_latest(args):
    registry = DockerRegistry()

    docker_tags = DockerHelper.pushed_tags(DOCKER_REPO)
    docker_tags = list(filter(lambda x: re.match(r'.+(\d+\.\d+\.\d+).+', x), docker_tags))
    docker_tags = map(lambda x: re.match(r'.+(\d+\.\d+\.\d+).+', x).groups()[0], docker_tags)
    docker_tags = sorted(docker_tags, cmp=version_compare, reverse=True)

    digest_latest = registry.get_digest("trzeci/emscripten", "latest")
    digest_recent = registry.get_digest("trzeci/emscripten", "sdk-tag-{v}-64bit".format(v=docker_tags[0]))

    if digest_latest != digest_recent or args.force:
        log("Set latest to: {}".format(docker_tags[0]), True)
        for repo in DOCKER_REPO_VARIANTS:
            tag = "sdk-tag-{v}-64bit".format(v=docker_tags[0])
            subprocess.call(["docker pull {repo}:{tag}".format(repo=repo, tag=tag)], shell=True)
            subprocess.call(["docker tag {repo}:{tag} {repo}:latest".format(repo=repo, tag=tag)], shell=True)
            subprocess.call(["docker push {repo}:latest".format(repo=repo)], shell=True)
    else:
        print("No need to update 'latest' tag, it's already set for " + docker_tags[0])

def test(args):
    """Run tests"""
    for tag in args.tags:
        EmscriptenTester.test_image((args.project or DOCKER_REPO) + ":" + tag, args.spotless)

def push(args):
    """Push created tags, what are waiting in queue document """
    while True:
        pushed = False
        if os.path.exists(QUEUE_FILE):
            with open(QUEUE_FILE, 'r') as fin:
                data = fin.read().splitlines(True)
            if len(data):
                tag_to_send = data[0].strip()
                with open(QUEUE_FILE, 'w') as fout:
                    fout.writelines(data[1:])
                if tag_to_send:
                    DockerHelper.push_image(tag_to_send, args.clean)
                    if args.push_gh:
                        new_tag = GH_DOCKER_REGISTRY + "/" + GH_DOCKER_REPO + "/" + tag_to_send.split("/")[-1]
                        DockerHelper.tag(tag_to_send, new_tag)
                        DockerHelper.push_image(new_tag, args.clean)

                    pushed = True
        if not pushed and args.no_block:
            log("[INFO] Nothing to do here, queue is empty")
            break
        time.sleep(2)


dashboard = Dashboard()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Emscripten Image generator')
    subparsers = parser.add_subparsers(title="command", help="Main work command")

    parser_build = subparsers.add_parser("compile", help="Compile Docker images.")
    parser_build.set_defaults(function=compile)
    parser_build.add_argument("sdks", type=str, nargs='*', help="Explicitly provide list of Emscripten SDKs in format sdk-incoming-32bit or sdk-tag-1.37.17-32bit")
    parser_build.add_argument("--branches", action="store_true", help="Update master and incoming images")
    parser_build.add_argument("--master", action="store_true", help="Update master images")
    parser_build.add_argument("--incoming", action="store_true", help="Update incoming images")
    parser_build.add_argument("--releases", action="store_true", help="Update released SDKs")
    parser_build.add_argument("--fast-fail", action="store_true", help="Stops queue after first failure")
    parser_build.add_argument("--emsdk-cs", default="master", help="Explicitly use given branch/changeset of juj/emsdk")
    parser_build.add_argument("--no-cache", action="store_true", help="Sets --no-cache for docker build command")

    parser_test = subparsers.add_parser("test", help="Test given tag(s) with Emscripten and WebAssembly compatibility")
    parser_test.set_defaults(function=test)
    parser_test.add_argument("tags", type=str, nargs='*', help="List of docker tags to test")
    parser_test.add_argument("--spotless", action="store_true", help="Remove used image")
    parser_test.add_argument("--project", help="Custom docker project")

    parser_push = subparsers.add_parser("push", help="Runs a service what will push created images")
    parser_push.add_argument("--clean", action="store_true", help="Remove pushed images")
    parser_push.add_argument("--no-block", action="store_true", help="Don't wait if queue is empty")
    parser_push.add_argument("--push-gh", action="store_true", help="Push also to GH registry")
    parser_push.set_defaults(function=push)

    parser_set_latest = subparsers.add_parser("set_latest", help="Automatically sets the 'latest' tag")
    parser_set_latest.add_argument("--force", action="store_true", help="Ignore comparing digests")
    parser_set_latest.set_defaults(function=set_latest)

    args = parser.parse_args()

    args.function(args)
